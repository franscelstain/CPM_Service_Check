<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\AppController;
use App\Http\Controllers\Administrative\Config\GeneralController;
use App\Models\Users\User;
use App\Models\Users\Investor\InvestorPasswordAttemp;
use App\Models\Users\UserPasswordAttemp;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Tymon\JWTAuth\Facades\JWTAuth;
use Illuminate\Support\Facades\Hash;

use Schema;

class AdminController extends AppController
{    
    /**
     * Get a JWT via given credentials.
     *
     * @param  Request  $request
     * @return Response
     */
    public function login(Request $request)
    {
        try 
        {
            if (!empty($this->app_validate($request, ['email' => 'required|string|email', 'password' => 'required|string'])))
            {
                exit();
            }
            
            $data   = $error = [];
            $msg    = 'Login Failed';
			$err	= 'Email or Password is wrong';
            
            if (! $token = Auth::guard('admin')->attempt($request->only(['email', 'password']))) 
            {
                //check whether email password ok, but not active
                $ch = User::where([['email', $request->email], ['is_active', 'Yes']])->first();
                if (!empty($ch->user_id))
                {
                    if ($ch->is_enable == 'No')
                    {
                        $err = 'Sorry, your account has been disabled';
                    }
                    else
                    {
                        $config         = new GeneralController;
                        $configPassword = $config->password()->original['data'];
                        $chAtempt       = UserPasswordAttemp::where([['user_id', $ch->user_id], ['is_active', 'Yes']])->first();
                        $attempCount    = 1;
                        if (!isset($chAtempt->attempt_count))
                        {
                            UserPasswordAttemp::create([
                                'user_id'       => $ch->user_id,
                                'attempt_count' => $attempCount,
                                'is_active'     => 'Yes',
                                'created_by'    => 'System',
                                'created_host'  => $_SERVER['SERVER_ADDR']
                            ]);
                        }
                        else
                        {
                            $attempCount = ($chAtempt->attempt_count + 1);
                            UserPasswordAttemp::where('user_id', $ch->user_id)->update(['attempt_count' => $attempCount, 'updated_host' => $_SERVER['SERVER_ADDR']]);                            
                        }

                        if ($attempCount >= $configPassword['PasswordInvalid'])
                        {
                            User::where([['user_id', $ch->user_id], ['is_active', 'Yes']])->update(['is_enable' => 'No']);
                            $err = 'Sorry, your account password has been block, because '. $configPassword['PasswordInvalid'] .' time, wrong password'; 
                        }
                        else
                        {
                            $err = 'Sorry, your password wrong, you was '. $attempCount .' time (maximum '. $configPassword['PasswordInvalid'] .' attempt)'; 
                        }
                    }
                }
                else
                {
                    $ch = User::where([['email', $request->email], ['is_active', 'No']])->first();
                    if (!empty($ch->user_id) && app('hash')->check($request->password, $ch->password)) 
                        $err = 'Sorry, your account has been delete';
                    else
                        $err = 'Sorry, your account is not registered';
                }
                
                $error = ['error_code' => 422, 'error_msg' => $err];
            }
            else
            {
                $msg    = 'Login Success';
                $result = (array) $this->respondWithToken($token);
                $data   = ['expires_in'     => $result['original']['expires_in'],
                           'token'          => $result['original']['token'],
                           'token_type'     => $result['original']['token_type'],
                           'user'           => Auth::guard('admin')->user()
                          ];
                
                UserPasswordAttemp::where('user_id', Auth::guard('admin')->user()->user_id)->update(['is_active' => 'No', 'attempt_count' => 0]);          
            }  
            return $this->app_response($msg, $data, $error);
        } 
        catch (\Exception $e) 
        {
            return $this->app_catch($e);
        }
    }

    public function logout()
    {
        if (Auth::guard('admin')->user()) 
        {
            User::where('user_id', Auth::guard('admin')->user()->id)->update(['token' => null]);
            JWTAuth::invalidate(JWTAuth::getToken());
        }
        return $this->app_response('Logout', 1);
    }
    
    public function user_auth()
    { 
        return $this->app_response('Auth', Auth::guard('admin')->user());
    }
	
    public function change_password(Request $request)
    {
        try
        {
            $error  = ['error_code' => 422, 'error_msg' => ['Unauthorized']];
            $data   = [];
            if (Auth::guard('admin')->user()->id)
            {
                $validate = ['old_password' => 'required|min:8', 'password' => 'required|confirmed|min:8|different:old_password'];
                if (!empty($this->app_validate($request, $validate)))
                    exit;

                if (Auth::guard('admin')->user()->email == $request->input('password')) {
                   $error  = ['error_code' => 422, 'error_msg' => ['Password cannot be the same as username']];
                } else {                 
                    if (Hash::check($request->input('old_password'), Auth::guard('admin')->user()->password)) 
                    {
                        /*
                        $request->request->add(['password' => app('hash')->make($request->input('password'))]);
                        $this->db_save($request, Auth::guard('admin')->user()->id, $this->form_ele());
                        */
                        
                        User::where('user_id', Auth::guard('admin')->user()->id)->update(['password'=>app('hash')->make($request->input('password'))]);
                        
                        $data   = ['id' => Auth::guard('admin')->user()->id];
                        $error  = [];
                    }
                    else
                    {
                        $error  = ['error_code' => 422, 'error_msg' => ['Invalid password']];
                    }
                }    
            }
            return $this->app_response('Change Password', $data, $error);
        }
        catch (\Exception $e)
        {
            return $this->app_catch($e);
        }
    }
    
    protected function form_ele()
    {
        return [
            'validate' => true
        ];
    }
    
}