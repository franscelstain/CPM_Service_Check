<?php

namespace App\Repositories\Balance;

use App\Interfaces\Balance\AssetOutstandingRepositoryInterface;
use App\Models\Crm\ImportedAssetDpk;
use App\Models\Crm\ImportedAssetInvest;
use App\Models\Financial\AssetOutstanding;
use App\Models\Financial\LiabilityOutstanding;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;


class AssetOutstandingRepository implements AssetOutstandingRepositoryInterface
{
    public function getTotalAssetsLiabilities(Request $request, $id)
    {
        try {
            $month = !empty($request->month) ? $request->month : 'm';
            $year = !empty($request->year) ? $request->year : 'Y';
            $start_date = date($year . '-' . $month . '-01');
            $end_date = date('Y-m-t', strtotime($start_date));
            $assets = AssetOutstanding::select('investor_id', DB::raw('MAX(outstanding_date) as out_date'))
                ->where([['is_active', 'Yes'],
                    ['investor_id', $id],
                    ['outstanding_date', '>=', $start_date],
                    ['outstanding_date', '<=', $end_date]
                ])
                ->groupBy('investor_id');
            $outstanding_date = AssetOutstanding::select(DB::raw("MAX(TO_CHAR(outstanding_date,'DD MonthYYYY')) as out_date"))
                ->where([['is_active', 'Yes'],
                    ['investor_id', $id],
                    ['outstanding_date', '>=', $start_date],
                    ['outstanding_date', '<=', $end_date]
                ])->first();
            $assets = AssetOutstanding::joinSub($assets, 'b', function ($join) {
                $join->on('b.investor_id', 't_assets_outstanding.investor_id')
                    ->whereColumn([['b.out_date', 't_assets_outstanding.outstanding_date']]);
            })->select(DB::raw('SUM(balance_amount) as balance'))
                ->where([
                    ['b.investor_id', $id],
                    ['t_assets_outstanding.balance_amount', '>=', 1],
                    ['t_assets_outstanding.is_active', 'Yes']
                ])
                ->whereColumn(
                    [['t_assets_outstanding.outstanding_date', 'out_date']]
                )
                ->first();
            $liabilities = LiabilityOutstanding::select('investor_id', DB::raw('MAX(outstanding_date) as out_date'))
                ->where([['is_active', 'Yes'],
                    ['investor_id', $id],
                    ['outstanding_date', '>=', $start_date],
                    ['outstanding_date', '<=', $end_date]
                ])
                ->groupBy('investor_id');
            $liabilities = LiabilityOutstanding::joinSub($liabilities, 'b', function ($join) {
                $join->on('b.investor_id', 't_liabilities_outstanding.investor_id')
                    ->whereColumn([['b.out_date', 'outstanding_date']]);
            })->select(DB::raw('SUM(t_liabilities_outstanding.outstanding_balance) as balance'))
                ->where([
                    ['b.investor_id', $id],
                ])->whereColumn(
                    [['t_liabilities_outstanding.outstanding_date', 'out_date']]
                )
                ->first();
            return [
                'assets' => $assets != null ? $assets->balance : 0,
                'liabilities' => $liabilities != null ? $liabilities->balance : 0,
                'outstanding_date' => $outstanding_date != null ? $outstanding_date->out_date : ''
            ];
        } catch (\Exception $e) {
            return (object) ['errors' => ['error_code' => 500, 'error_msg' => $e->getMessage()]];
        }
    }

    public function getTotalReturnAssets(Request $request, $id)
    {
        try {
            $month = !empty($request->month) ? $request->month : 'm';
            $year = !empty($request->year) ? $request->year : 'Y';
            $start_date = date($year . '-' . $month . '-01');
            $end_date = date('Y-m-t', strtotime($start_date));
            $data = DB::select("SELECT 
            (SELECT SUM(return_amount) FROM t_assets_outstanding tao inner join (select investor_id, MAX(outstanding_date) as out_date from t_assets_outstanding where is_active = 'Yes' and outstanding_date >='$start_date' and outstanding_date <= '$end_date' and investor_id = '$id' group by investor_id)as b on b.investor_id = tao.investor_id join m_products mp on mp.product_id = tao.product_id join m_asset_class mac on mac.asset_class_id= mp.asset_class_id join m_asset_categories mac2 on mac2.asset_category_id= mac.asset_category_id where LOWER(mac.asset_class_name) = 'saving' and LOWER(mac2.asset_category_name) = 'dpk' and outstanding_date = out_date) as saving,(SELECT SUM(return_amount) FROM t_assets_outstanding tao inner join (select investor_id, MAX(outstanding_date) as out_date from t_assets_outstanding where is_active = 'Yes' and outstanding_date >='$start_date' and outstanding_date <= '$end_date' and investor_id = '$id' group by investor_id)as b on b.investor_id = tao.investor_id join m_products mp on mp.product_id = tao.product_id join m_asset_class mac on mac.asset_class_id= mp.asset_class_id join m_asset_categories mac2 on mac2.asset_category_id= mac.asset_category_id where LOWER(mac.asset_class_name) = 'deposit' and LOWER(mac2.asset_category_name) = 'dpk' and outstanding_date = out_date) as deposit,(SELECT SUM(return_amount) FROM t_assets_outstanding tao inner join (select investor_id, MAX(outstanding_date) as out_date from t_assets_outstanding where is_active = 'Yes' and outstanding_date >='$start_date' and outstanding_date <= '$end_date' and investor_id = '$id' group by investor_id)as b on b.investor_id = tao.investor_id join m_products mp on mp.product_id = tao.product_id join m_asset_class mac on mac.asset_class_id= mp.asset_class_id join m_asset_categories mac2 on mac2.asset_category_id= mac.asset_category_id where LOWER(mac2.asset_category_name) = 'bonds' and outstanding_date = out_date) as bonds, (SELECT SUM(return_amount) FROM t_assets_outstanding tao inner join (select investor_id, MAX(outstanding_date) as out_date from t_assets_outstanding where is_active = 'Yes' and outstanding_date >='$start_date' and outstanding_date <= '$end_date' and investor_id = '$id' group by investor_id)as b on b.investor_id = tao.investor_id join m_products mp on mp.product_id = tao.product_id join m_asset_class mac on mac.asset_class_id= mp.asset_class_id join m_asset_categories mac2 on mac2.asset_category_id= mac.asset_category_id where LOWER(mac2.asset_category_name) = 'mutual fund' and outstanding_date = out_date) as mutual_fund");
            if (!empty($data[0])) {
                $data = $data[0];
                $realized = $data->saving + $data->deposit;
                $unrealized = $data->bonds + $data->mutual_fund;
                $total = $realized + $unrealized;
                if ($total) {
                    $realized_percent = $realized / $total * 100;
                    $unrealized_percent = $unrealized / $total * 100;
                } else {
                    $realized_percent = 0;
                    $unrealized_percent = 0;
                }
                $data = array_merge((array) $data, (array) ['realized' => $realized, 'unrealized' => $unrealized, 'total' => $total, 'realized_percent' => $realized_percent, 'unrealized_percent' => $unrealized_percent]);
            }
            return $data;
        } catch (\Exception $e) {
            return (object) ['errors' => ['error_code' => 500, 'error_msg' => $e->getMessage()]];
        }
    }

    public function getAssetBank(Request $request, $id)
    {
        $month = !empty($request->month) ? $request->month : 'm';
        $year = !empty($request->year) ? $request->year : 'Y';
        $start_date = date($year . '-' . $month . '-01');
        $end_date = date('Y-m-t', strtotime($start_date));
        try {
            $sub = AssetOutstanding::select('investor_id', DB::raw('MAX(outstanding_date) as out_date'))
                ->where([['is_active', 'Yes'],
                    ['investor_id', $id],
                    ['outstanding_date', '>=', $start_date],
                    ['outstanding_date', '<=', $end_date]
                ])
                ->groupBy('investor_id');
            return AssetOutstanding::joinSub($sub, 'b', function ($join) {
                $join->on('b.investor_id', 't_assets_outstanding.investor_id')
                    ->whereColumn([['b.out_date', 't_assets_outstanding.outstanding_date']]);
            })
                ->join('m_products as c', 'c.product_id', 't_assets_outstanding.product_id')
                ->join('m_asset_class as d', 'd.asset_class_id', 'c.asset_class_id')
                ->join('m_asset_categories as e', 'e.asset_category_id', 'd.asset_category_id')
                ->join('u_investors as f', 'f.investor_id', 't_assets_outstanding.investor_id')
                ->leftJoin('m_currency as g', function ($qry) {
                    $qry->on('g.currency_id', 'c.currency_id')->where('g.is_active', 'Yes');
                })
                ->whereIn(DB::raw('LOWER(e.asset_category_name)'), ['dpk'])
                ->where([
                    ['b.investor_id', $id],
                    ['t_assets_outstanding.is_active', 'Yes'],
                    ['t_assets_outstanding.balance_amount', '>=', 1],
                ])->whereColumn(
                    [['t_assets_outstanding.outstanding_date', 'out_date']]
                )
                ->orderBy('t_assets_outstanding.data_date','desc')
                ->get();
        } catch (\Exception $e) {
            return (object) ['errors' => ['error_code' => 500, 'error_msg' => $e->getMessage()]];
        }
    }

    public function getAssetBonds(Request $request, $id)
    {
        $month = !empty($request->month) ? $request->month : 'm';
        $year = !empty($request->year) ? $request->year : 'Y';
        $start_date = date($year . '-' . $month . '-01');
        $end_date = date('Y-m-t', strtotime($start_date));

        try {
            $sub = AssetOutstanding::select('investor_id', DB::raw('MAX(outstanding_date) as out_date'))
                ->where([['is_active', 'Yes'],
                    ['investor_id', $id],
                    ['outstanding_date', '>=', $start_date],
                    ['outstanding_date', '<=', $end_date]
                ])->groupBy('investor_id');
            return AssetOutstanding::joinSub($sub, 'b', function ($join) {
                $join->on('b.investor_id', 't_assets_outstanding.investor_id')
                    ->whereColumn([['b.out_date', 't_assets_outstanding.outstanding_date']]);
            })
                ->join('m_products as c', 'c.product_id', 't_assets_outstanding.product_id')
                ->join('m_asset_class as d', 'd.asset_class_id', 'c.asset_class_id')
                ->join('m_asset_categories as e', 'e.asset_category_id', 'd.asset_category_id')
                ->join('u_investors as f', 'f.investor_id', 't_assets_outstanding.investor_id')
                ->leftJoin('t_coupon as h', function ($qry) {
                    $qry->on('h.product_id', 'c.product_id')->whereColumn('h.coupon_date', 'out_date');
                })
                ->leftJoin('m_products_prices as g', function ($q) {
                    $q->whereColumn('g.product_id', 't_assets_outstanding.product_id')
                        ->where('g.price_date', '=', DB::raw('(SELECT max(price_date) FROM m_products_prices mpp2 WHERE mpp2.product_id = g.product_id)'))
                        ->orderBy('g.price_date', 'DESC');
                })
                ->leftJoin('t_stg_exchange_rates as i', function ($q) {
                    $q->whereColumn('t_assets_outstanding.currency', 'i.currency')->whereColumn('t_assets_outstanding.data_date', 'i.date');
                })
                ->addSelect('t_assets_outstanding.currency as currency', '*')
                ->whereIn(DB::raw('LOWER(e.asset_category_name)'), ['bonds'])
                ->where([
                    ['t_assets_outstanding.is_active', 'Yes'],
                    ['t_assets_outstanding.balance_amount', '>=', 1]
                ])->whereColumn(
                    [['t_assets_outstanding.outstanding_date', 'out_date']]
                )
                ->orderBy('c.product_id')
                ->get();
        } catch (\Exception $e) {
            return (object) ['errors' => ['error_code' => 500, 'error_msg' => $e->getMessage()]];
        }
    }

    public function getAssetCategory(Request $request, $id)
    {
        $month = !empty($request->month) ? $request->month : 'm';
        $year = !empty($request->year) ? $request->year : 'Y';
        $start_date = date($year . '-' . $month . '-01');
        $end_date = date('Y-m-t', strtotime($start_date));
        try {
            $data = DB::select("SELECT 
            (SELECT SUM(balance_amount) FROM t_assets_outstanding tao inner join (select investor_id, MAX(outstanding_date) as out_date from t_assets_outstanding where is_active = 'Yes' and outstanding_date >='$start_date' and outstanding_date <= '$end_date' and investor_id = '$id' group by investor_id)as b on b.investor_id = tao.investor_id join m_products mp on mp.product_id = tao.product_id join m_asset_class mac on mac.asset_class_id= mp.asset_class_id join m_asset_categories mac2 on mac2.asset_category_id= mac.asset_category_id where LOWER(mac.asset_class_name) = 'saving' and LOWER(mac2.asset_category_name) = 'dpk' and outstanding_date = out_date) as saving,(SELECT SUM(balance_amount) FROM t_assets_outstanding tao inner join (select investor_id, MAX(outstanding_date) as out_date from t_assets_outstanding where is_active = 'Yes' and outstanding_date >='$start_date' and outstanding_date <= '$end_date' and investor_id = '$id' group by investor_id)as b on b.investor_id = tao.investor_id join m_products mp on mp.product_id = tao.product_id join m_asset_class mac on mac.asset_class_id= mp.asset_class_id join m_asset_categories mac2 on mac2.asset_category_id= mac.asset_category_id where  LOWER(mac.asset_class_name) = 'bancassurance' and outstanding_date = out_date) as insurance,(SELECT SUM(balance_amount) FROM t_assets_outstanding tao inner join (select investor_id, MAX(outstanding_date) as out_date from t_assets_outstanding where is_active = 'Yes' and outstanding_date >='$start_date' and outstanding_date <= '$end_date' and investor_id = '$id' group by investor_id)as b on b.investor_id = tao.investor_id join m_products mp on mp.product_id = tao.product_id join m_asset_class mac on mac.asset_class_id= mp.asset_class_id join m_asset_categories mac2 on mac2.asset_category_id= mac.asset_category_id where LOWER(mac.asset_class_name) = 'deposit' and LOWER(mac2.asset_category_name) = 'dpk' and outstanding_date = out_date) as deposit,(SELECT SUM(balance_amount) FROM t_assets_outstanding tao inner join (select investor_id, MAX(outstanding_date) as out_date from t_assets_outstanding where is_active = 'Yes' and outstanding_date >='$start_date' and outstanding_date <= '$end_date' and investor_id = '$id' group by investor_id)as b on b.investor_id = tao.investor_id join m_products mp on mp.product_id = tao.product_id join m_asset_class mac on mac.asset_class_id= mp.asset_class_id join m_asset_categories mac2 on mac2.asset_category_id= mac.asset_category_id where LOWER(mac2.asset_category_name) = 'bonds' and outstanding_date = out_date) as bonds, (SELECT SUM(balance_amount) FROM t_assets_outstanding tao inner join (select investor_id, MAX(outstanding_date) as out_date from t_assets_outstanding where is_active = 'Yes' and outstanding_date >='$start_date' and outstanding_date <= '$end_date' and investor_id = '$id' group by investor_id)as b on b.investor_id = tao.investor_id join m_products mp on mp.product_id = tao.product_id join m_asset_class mac on mac.asset_class_id= mp.asset_class_id join m_asset_categories mac2 on mac2.asset_category_id= mac.asset_category_id where LOWER(mac2.asset_category_name) = 'mutual fund' and outstanding_date = out_date) as mutual_fund");
            return [
                [
                    "asset_category_name" => "Mutual Fund",
                    "balance" => $data[0] ? $data[0]->mutual_fund : 0
                ],
                [
                    "asset_category_name" => "Bonds",
                    "balance" => $data[0] ? $data[0]->bonds : 0
                ],
                [
                    "asset_category_name" => "Saving",
                    "balance" => $data[0] ? $data[0]->saving : 0
                ],
                [
                    "asset_category_name" => "Insurance",
                    "balance" => $data[0] ? $data[0]->insurance : 0
                ],
                [
                    "asset_category_name" => "Deposit",
                    "balance" => $data[0] ? $data[0]->deposit : 0
                ],
            ];
        } catch (\Exception $e) {
            return (object) ['errors' => ['error_code' => 500, 'error_msg' => $e->getMessage()]];
        }
    }

    public function getAssetMutual(Request $request, $id)
    {
        $month = !empty($request->month) ? $request->month : 'm';
        $year = !empty($request->year) ? $request->year : 'Y';
        $start_date = date($year . '-' . $month . '-01');
        $end_date = date('Y-m-t', strtotime($start_date));
        try {
            $sub = AssetOutstanding::select('investor_id', DB::raw('MAX(outstanding_date) as out_date'))
                ->where([['is_active', 'Yes'],
                    ['investor_id', $id],
                    ['outstanding_date', '>=', $start_date],
                    ['outstanding_date', '<=', $end_date]
                ])->groupBy('investor_id');
            return AssetOutstanding::joinSub($sub, 'b', function ($join) {
                $join->on('b.investor_id', 't_assets_outstanding.investor_id')
                    ->whereColumn([['b.out_date', 't_assets_outstanding.outstanding_date']]);
            })
                ->join('m_products as c', 'c.product_id', 't_assets_outstanding.product_id')
                ->join('m_asset_class as d', 'd.asset_class_id', 'c.asset_class_id')
                ->join('m_asset_categories as e', 'e.asset_category_id', 'd.asset_category_id')
                ->join('u_investors as f', 'f.investor_id', 't_assets_outstanding.investor_id')
                ->leftJoin('m_currency as g', function ($qry) {
                    $qry->on('g.currency_id', 'c.currency_id')->where('c.is_active', 'Yes');
                })
                ->leftJoin('m_products_prices as h', function ($q) {
                    $q->on('h.product_id', 'c.product_id')
                        ->where('h.price_date', '=', DB::raw('(SELECT max(price_date) FROM m_products_prices mpp2 WHERE mpp2.product_id = h.product_id)'))
                        ->orderBy('h.price_date', 'DESC');
                })
                ->leftJoin('t_stg_exchange_rates as i', function ($q) {
                    $q->whereColumn('t_assets_outstanding.currency', 'i.currency')->whereColumn('t_assets_outstanding.data_date', 'i.date');
                })
                ->addSelect('t_assets_outstanding.currency as currency', '*')
                ->where(DB::raw('LOWER(e.asset_category_name)'), 'mutual fund')
                ->where([
                    ['f.investor_id', $id],
                    ['t_assets_outstanding.is_active', 'Yes'],
                    ['t_assets_outstanding.outstanding_unit', '>=', 1]
                ])
                ->whereColumn(
                    [['t_assets_outstanding.outstanding_date', 'out_date']]
                )
                ->orderBy('t_assets_outstanding.data_date','desc')
                ->get();
        } catch (\Exception $e) {
            return (object) ['errors' => ['error_code' => 500, 'error_msg' => $e->getMessage()]];
        }
    }

    public function getAssetInsurance(Request $request, $id)
    {
        $month = !empty($request->month) ? $request->month : 'm';
        $year = !empty($request->year) ? $request->year : 'Y';
        $start_date = date($year . '-' . $month . '-01');
        $end_date = date('Y-m-t', strtotime($start_date));
        try {
            $sub = AssetOutstanding::select('investor_id', DB::raw('MAX(outstanding_date) as out_date'))
                ->where([['is_active', 'Yes'],
                    ['investor_id', $id],
                    ['outstanding_date', '>=', $start_date],
                    ['outstanding_date', '<=', $end_date]
                ])->groupBy('investor_id');
            return AssetOutstanding::joinSub($sub, 'b', function ($join) {
                $join->on('b.investor_id', 't_assets_outstanding.investor_id')
                    ->whereColumn([['b.out_date', 't_assets_outstanding.outstanding_date']]);
            })
                ->join('m_products as c', 'c.product_id', 't_assets_outstanding.product_id')
                ->join('m_asset_class as d', 'd.asset_class_id', 'c.asset_class_id')
                ->join('m_asset_categories as e', 'e.asset_category_id', 'd.asset_category_id')
                ->join('u_investors as f', 'f.investor_id', 't_assets_outstanding.investor_id')
                ->leftJoin('m_currency as g', function ($qry) {
                    $qry->on('g.currency_id', 'c.currency_id')->where('c.is_active', 'Yes');
                })
                ->leftJoin('m_issuer as h', 'h.issuer_id', 'c.issuer_id')
                ->where(DB::raw('LOWER(d.asset_class_name)'), 'bancassurance')
                ->where([
                    ['f.investor_id', $id],
                    ['t_assets_outstanding.is_active', 'Yes'],
                ])->whereColumn(
                    [['t_assets_outstanding.outstanding_date', 'out_date']]
                )
                ->get();
        } catch (\Exception $e) {
            return (object) ['errors' => ['error_code' => 500, 'error_msg' => $e->getMessage()]];
        }
    }

    public function getAssetMutualClass(Request $request, $id)
    {
        $month = !empty($request->month) ? $request->month : 'm';
        $year = !empty($request->year) ? $request->year : 'Y';
        $start_date = date($year . '-' . $month . '-01');
        $end_date = date('Y-m-t', strtotime($start_date));
        try {
            $sub = AssetOutstanding::select('investor_id', DB::raw('MAX(outstanding_date) as out_date'))
                ->where([['is_active', 'Yes'],
                    ['investor_id', $id],
                    ['outstanding_date', '>=', $start_date],
                    ['outstanding_date', '<=', $end_date]
                ])->groupBy('investor_id');
            return AssetOutstanding::joinSub($sub, 'b', function ($join) {
                $join->on('b.investor_id', 't_assets_outstanding.investor_id')
                    ->whereColumn([['b.out_date', 't_assets_outstanding.outstanding_date']]);
            })
                ->join('m_products as c', 'c.product_id', 't_assets_outstanding.product_id')
                ->join('m_asset_class as d', 'd.asset_class_id', 'c.asset_class_id')
                ->join('m_asset_categories as e', 'e.asset_category_id', 'd.asset_category_id')
                ->join('u_investors as f', 'f.investor_id', 't_assets_outstanding.investor_id')
                ->where(DB::raw('LOWER(e.asset_category_name)'), 'mutual fund')
                ->where([
                    ['f.investor_id', $id],
                    ['t_assets_outstanding.is_active', 'Yes'],
                    ['t_assets_outstanding.outstanding_unit', '>=', 1]
                ])
                ->whereColumn(
                    [['t_assets_outstanding.outstanding_date', 'out_date']]
                )
                ->select('d.asset_class_name', 'd.asset_class_color', DB::raw('SUM(t_assets_outstanding.balance_amount) as balance'))
                ->groupBy('d.asset_class_name', 'd.asset_class_color')
                ->get();
        } catch (\Exception $e) {
            return (object) ['errors' => ['error_code' => 500, 'error_msg' => $e->getMessage()]];
        }
    }

    public function getIntegration()
    {
        try {
            // $db_cpm     = env('DB_DATABASE');
            // $db_crm     = env('DB2_DATABASE');
            $today = date('Y-m-d');
            $now = date('Y-m-d H:i:s');
            $update = AssetOutstanding::where([
                ['outstanding_date', $today],
                ['created_by', 'system.dpk'],
                ['is_active', 'Yes']
            ])->delete();

            $balance = ImportedAssetDpk::join('u_investors as b', function ($query) {
                $query->on('b.cif', 'imported_asset_dpk.cif')->where('b.is_active', 'Yes');
            })
                ->join('m_products as c', function ($que) {
                    $que->on('c.product_name', 'imported_asset_dpk.product_name')->select('c.product_id')
                        ->where('c.is_active', 'Yes');
                })
                ->where([['imported_asset_dpk.deleted', false], ['imported_asset_dpk.priority', 'Y']])
                ->select(
                    'b.investor_id as investor_id',
                    'c.product_id as product_id',
                    'imported_asset_dpk.account_number as account_no',
                    'imported_asset_dpk.original_currency_amt as balance_amount',
                    'imported_asset_dpk.idr_equiv_amt as convert_balance',
                    'imported_asset_dpk.interest_rate as return_percentage',
                    'imported_asset_dpk.principal as return_amount',
                    'imported_asset_dpk.currency as currency',
                    'imported_asset_dpk.kurs as kurs',
                    DB::raw("CASE WHEN imported_asset_dpk.balance_date IS NOT NULL 
                                              THEN CONCAT(RIGHT(imported_asset_dpk.balance_date, 4), '-', 
                                                          SUBSTR(imported_asset_dpk.balance_date, 4, 2), '-', 
                                                          LEFT(imported_asset_dpk.balance_date, 2)) 
                                          ELSE NULL END AS data_date"),
                    DB::raw("CASE WHEN imported_asset_dpk.maturity_date !='00/00/0000' 
                                              THEN CONCAT(RIGHT(imported_asset_dpk.maturity_date, 4), '-', 
                                                          SUBSTR(imported_asset_dpk.maturity_date, 4, 2), '-',
                                                          LEFT(imported_asset_dpk.maturity_date, 2)) 
                                              ELSE NULL END AS due_date"),
                    DB::raw("'$today' as outstanding_date"),
                    DB::raw("'Yes' as is_active"),
                    DB::raw("'system.dpk' as created_by"),
                    DB::raw("'::1' as created_host"),
                    DB::raw("'$now' as created_at"),
                )->distinct();
            $insert = AssetOutstanding::insertUsing([
                'investor_id',
                'product_id',
                'account_no',
                'balance_amount',
                'convert_balance',
                'return_percentage',
                'return_amount',
                'currency',
                'kurs',
                'data_date',
                'due_date',
                'outstanding_date',
                'is_active',
                'created_by',
                'created_host',
                'created_at'
            ], $balance);

            $updateInvest = AssetOutstanding::where([
                ['outstanding_date', $today],
                ['created_by', 'system.invest'],
                ['is_active', 'Yes']
            ])->delete();

            $balanceInvest = ImportedAssetInvest::join('u_investors as b', function ($query) {
                $query->on('b.cif', 'imported_asset_investment.cif')->where('b.is_active', 'Yes');
            })
                ->join('m_products as c', function ($que) {
                    $que->on('c.product_code', 'imported_asset_investment.product_code')->select('c.product_id')
                        ->where('c.is_active', 'Yes');
                })
                ->whereNotExists(function ($qry) use ($today) {
                    $qry->select(DB::raw(1))
                        ->from('t_assets_outstanding')
                        ->whereColumn([
                            ['t_assets_outstanding.account_no', 'imported_asset_investment.account_number'],
                            ['t_assets_outstanding.investor_id', 'b.investor_id'],
                            ['t_assets_outstanding.product_id', 'c.product_id']
                        ])
                        ->where('outstanding_date', $today);
                })
                ->select(
                    DB::raw('DATE_FORMAT(imported_asset_investment.date, "%Y-%m-%d") as subscription_date'),
                    'b.investor_id as investor_id',
                    'imported_asset_investment.ifua as ifua',
                    'c.product_id as product_id',
                    'imported_asset_investment.currency as currency',
                    'imported_asset_investment.account_number as account_no',
                    'imported_asset_investment.unit as outstanding_unit',
                    'imported_asset_investment.balance as balance_amount_original',
                    'imported_asset_investment.balance_converted as balance_amount',
                    'imported_asset_investment.avg_cost  as avg_unit_cost',
                    'imported_asset_investment.investment_amount  as investment_amount_original',
                    'imported_asset_investment.investment_amount_converted  as investment_amount',
                    'imported_asset_investment.ugl_amount  as return_amount_original',
                    'imported_asset_investment.ugl_amount_converted  as return_amount',
                    'imported_asset_investment.ugl_percentage  as return_percentage',
                    DB::raw("'$today' as outstanding_date"),
                    DB::raw("'Yes' as is_active"),
                    DB::raw("'system.invest' as created_by"),
                    DB::raw("'::1' as created_host"),
                    DB::raw("'$now' as created_at")
                )->distinct();
            $insertInvest = AssetOutstanding::insertUsing([
                'subscription_date',
                'investor_id',
                'ifua',
                'product_id',
                'currency',
                'account_no',
                'outstanding_unit',
                'balance_amount_original',
                'balance_amount',
                'avg_unit_cost',
                'investment_amount_original',
                'investment_amount',
                'return_amount_original',
                'return_amount',
                'return_percentage',
                'outstanding_date',
                'is_active',
                'created_by',
                'created_host',
                'created_at'
            ], $balanceInvest);
            return [
                'insert' => $insert,
                'update' => $update,
                'insertInvest' => $insertInvest,
                'updateInvest' => $updateInvest
            ];
        } catch (\Exception $e) {
            return $e->getMessage();
        }
    }
}